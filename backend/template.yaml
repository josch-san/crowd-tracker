AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CrowdTracker - Backend

Parameters:
  Mode:
    Type: String
    Description: Build mode
    Default: development
    AllowedValues:
      - development
      - stage
      - production
  TableName:
    Type: String
    Description: DynamoDB table name

Mappings:
  ModeMap:
    development:
      ModeSuffix: -dev
      ApiName: Crowd Tracker Dev
    stage:
      ModeSuffix: -test
      ApiName: Crowd Tracker Stage
    production:
      ModeSuffix: ''
      ApiName: Crowd Tracker

Resources:
  BackendAppSyncRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /service-role/
      RoleName: !Sub
        - 'CrowdTrackerAppSyncRole${suffix}'
        - suffix: !FindInMap [ModeMap, !Ref Mode, ModeSuffix]
      Description: CrowdTracker project appsync service role.
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub
            - 'appsync-policy${suffix}'
            - suffix: !FindInMap [ModeMap, !Ref Mode, ModeSuffix]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - 
                Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  # - dynamodb:DeleteItem
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}/*'
      Tags:
        - Key: application
          Value: crowd-tracker
        - Key: module
          Value: backend
        - Key: environment
          Value: !Ref Mode

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
        InviteMessageTemplate:
          EmailMessage: Tu usuario de acceso a la aplicación CrowdTracker es {username} y la contraseña temporal es {####}
          EmailSubject: Bienvenido a CrowdTracker
      AutoVerifiedAttributes:
        - email
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      MfaConfiguration: 'OFF'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireNumbers: true
          RequireSymbols: true
          RequireLowercase: false
          RequireUppercase: false
          TemporaryPasswordValidityDays: 7
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: false
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      UserPoolName: !Sub
        - 'crowd-tracker-user-pool${suffix}'
        - suffix: !FindInMap [ModeMap, !Ref Mode, ModeSuffix]
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailMessage: Tu codigo de verificación es {####}.
        EmailSubject: CrowdTracker - Código de verificación
      UserPoolTags:
        application: crowd-tracker
        module: backend
        environment: !Ref Mode

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref CognitoUserPool
      Domain: !Sub
        - 'crowd-tracker${suffix}'
        - suffix: !FindInMap [ModeMap, !Ref Mode, ModeSuffix]
        # - suffix: !Transform
        #     - Name: String
        #       Parameters:
        #         InputString: !Select [0, !Split [-, !Select [2, !Split [/, !Ref AWS::StackId ]]]]
        #         Operation: Lower

  GoogleIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ProviderName: Google
      ProviderType: Google
      ProviderDetails:
        client_id: '{{resolve:secretsmanager:prod/crowd-tracker/oidc/google:SecretString:client_id}}'
        client_secret: '{{resolve:secretsmanager:prod/crowd-tracker/oidc/google:SecretString:client_secret}}'
        authorize_scopes: profile email openid
      AttributeMapping:
        name: name
        email: email
        email_verified: email_verified

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: crowd-tracker-web-client
      ExplicitAuthFlows:
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 31
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders: [ !Ref GoogleIdentityProvider ]
      AllowedOAuthFlows: [ code ]
      AllowedOAuthScopes: [ email, profile, openid, aws.cognito.signin.user.admin ]
      CallbackURLs: [ http://localhost:3000/login ]
      LogoutURLs: [ http://localhost:3000 ]

  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !FindInMap [ModeMap, !Ref Mode, ApiName]
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        AwsRegion: !Ref AWS::Region
        UserPoolId: !Ref CognitoUserPool
        DefaultAction: ALLOW
      AdditionalAuthenticationProviders:
        - AuthenticationType: AWS_IAM
      Tags:
        - Key: application
          Value: crowd-tracker
        - Key: module
          Value: backend
        - Key: environment
          Value: !Ref Mode

  ApiSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DefinitionS3Location: schema.graphql

  DynamoDBDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Type: AMAZON_DYNAMODB
      Name: crowdTrackerDatabase
      Description: Crowd Tracker DynamoDB connection
      DynamoDBConfig:
        AwsRegion: !Ref AWS::Region
        TableName: !Ref TableName
      ServiceRoleArn: !GetAtt BackendAppSyncRole.Arn

  QueryGetClientResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: ApiSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DataSourceName: !GetAtt DynamoDBDataSource.Name
      TypeName: Query
      FieldName: getClient
      RequestMappingTemplateS3Location: resolvers/Client/Query/getClient.req.vtl
      ResponseMappingTemplateS3Location: resolvers/Client/Query/getClient.res.vtl

  QueryListClientsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: ApiSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DataSourceName: !GetAtt DynamoDBDataSource.Name
      TypeName: Query
      FieldName: listClients
      RequestMappingTemplateS3Location: resolvers/Client/Query/listClients.req.vtl
      ResponseMappingTemplateS3Location: resolvers/Client/Query/listClients.res.vtl

  MutationCreateClientResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: ApiSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DataSourceName: !GetAtt DynamoDBDataSource.Name
      TypeName: Mutation
      FieldName: createClient
      RequestMappingTemplateS3Location: resolvers/Client/Mutation/createClient.req.vtl
      ResponseMappingTemplateS3Location: resolvers/Client/Mutation/createClient.res.vtl

Outputs:
  UserPoolId:
    Value: !Ref CognitoUserPool
    Description: Cognito user pool id
  UserPoolWebClientId:
    Value: !Ref CognitoUserPoolClient
    Description: Cognito user pool web client id
  UserPoolDomain:
    Value: !Sub '${CognitoUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com'
    Description: Url for federated user pool domain
  AppSyncUrl:
    Value: !GetAtt GraphQLApi.GraphQLUrl
    Description: URL for appsync api
  ApiAuthenticationType:
    Value: AMAZON_COGNITO_USER_POOLS
    Description: Main appsync API authentication type
